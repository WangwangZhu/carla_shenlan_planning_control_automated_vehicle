cmake_minimum_required(VERSION 3.8)
project(carla_shenlan_a_star_planner)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(std_msgs REQUIRED)
find_package(nav_msgs REQUIRED)
find_package(sensor_msgs REQUIRED)
find_package(visualization_msgs REQUIRED)
find_package(rclcpp REQUIRED)
find_package(Eigen3 REQUIRED)
find_package(tf2 REQUIRED)
find_package(tf2_ros REQUIRED)
find_package(tf2_geometry_msgs REQUIRED)
find_package(carla_msgs REQUIRED)
find_package(PCL REQUIRED COMPONENTS common io)
# uncomment the following section in order to fill in
# further dependencies manually.
# find_package(<dependency> REQUIRED)

link_directories(${PCL_LIBRARY_DIRS})
add_definitions(${PCL_DEFINITIONS})

add_executable(a_star_planner 
                src/a_star_planner.cpp
                src/Astar_searcher.cpp
                )
target_include_directories(a_star_planner PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>)
target_link_libraries(a_star_planner ipopt  ${PCL_LIBRARIES} )
target_compile_features(a_star_planner PUBLIC c_std_99 cxx_std_17)  # Require C99 and C++17

ament_target_dependencies(a_star_planner "std_msgs" "rclcpp" "nav_msgs" "sensor_msgs" "visualization_msgs" "tf2" "tf2_ros" "tf2_geometry_msgs" "carla_msgs")# ipopt z ssl uv uWS

install(TARGETS a_star_planner
  DESTINATION lib/${PROJECT_NAME})

add_executable(random_map_generator 
  src/random_map_generator.cpp
  )
target_include_directories(random_map_generator PUBLIC
$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
$<INSTALL_INTERFACE:include>)
target_link_libraries(random_map_generator ipopt ${PCL_LIBRARIES} )
target_compile_features(random_map_generator PUBLIC c_std_99 cxx_std_17)  # Require C99 and C++17

ament_target_dependencies(random_map_generator "std_msgs" "rclcpp" "nav_msgs" "sensor_msgs" "visualization_msgs" "tf2" "tf2_ros" "tf2_geometry_msgs" "carla_msgs")# ipopt z ssl uv uWS

install(TARGETS random_map_generator
DESTINATION lib/${PROJECT_NAME})

# Install launch files.
install(DIRECTORY
launch
# config
rviz
DESTINATION share/${PROJECT_NAME}/
)

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # uncomment the line when a copyright and license is not present in all source files
  #set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # uncomment the line when this package is not in a git repo
  #set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

ament_package()
